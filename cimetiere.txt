Toutes les fonctions qui ne servent plus mais que on garde parce que "on sait jamais."
Attention, il n'est pas garantit qu'elles soient fonctionnelles !


#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <ctype.h> 
#include <string.h>
#include <math.h>
#include <time.h>

#include "nrdef.h"
#include "nrutil.h"
#include "mouvement.h"
#include "main.h"

#include "vnrdef.h"
#include "vnrutil.h"
#include "SSE2util.h"
#include "main.h"
#include "test_mouvement_SSE2.h"

#include "cimetiere.h"


//aide possible at : https://stackoverflow.com/questions/32408665/fastest-way-to-compute-absolute-value-using-sse
vuint8 vuint8_abs_SSE2(vuint8 a)
{   
    //si a > 0, return a, else return son complément à deux
    PRINT_BUG();
    return vuint8_if_else(a, _mm_setzero_si128(), a, vuint8_ca2(a));
}


void test_vuint8_abs_SSE2()
{	
	PRINT_BEGIN();

	vuint8 a, abs_a;
	a = init_vuint8(-5);
	abs_a = vuint8_abs_SSE2(a);
	display_vsint8(a, " %d\t", "a\t"); puts("");
	display_vuint8(abs_a, " %d\t", "abs_a\t"); puts("\n");

	vuint8 b, abs_b;
	b = init_vuint8(8);
	abs_b = vuint8_abs_SSE2(b);
	display_vuint8(b, " %d\t", "b\t"); puts("");
	display_vuint8(abs_b, " %d\t", "abs_b\t"); puts("\n");

	vuint8 c, abs_c;
	c = init_vuint8(0);
	abs_c = vuint8_abs_SSE2(c);
	display_vuint8(c, " %d\t", "c\t"); puts("");
	display_vuint8(abs_c, " %d\t", "abs_c\t"); puts("\n");

	PRINT_END();

}

void part1_sd_SSE2(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1,
					 uint8 **Mt, uint8 **Mt_1, uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	//vuint8 *pOt = (vuint8*) Ot[0];
	vuint8 *pIt = (vuint8*) It[0];
	//vuint8 *pIt_1 = (vuint8*) It_1[0];
	//vuint8 *pEt = (vuint8 *) Et[0];
	//vuint8 *pVt = (vuint8*) Vt[0];
	//vuint8 *pVt_1 = (vuint8*) Vt_1[0];
	vuint8 *pMt = (vuint8*) Mt[0];
	vuint8 *pMt_1 = (vuint8*) Mt_1[0];

	vuint8 a,b,x,y,z, one;
	one = init_vuint8(1);

	long len = ((nrh - nrl + 1) * (nch - ncl + 1))/16;
	//float flen = (float) (((nrh - nrl) * (nch - ncl))/16);
	//printf("len = %ld, flen = %f \n", len, flen);

	for (int i = 0; i < len; i++)
	{
		probleme avec le -1
		a = pMt_1[i];
		b = pIt[i];
		x = init_vsint8(-1);//Mt plus grand
		y = init_vsint8(+1);//Mt plus petit
		z = _mm_setzero_si128(); //Mt ==		
		pMt[i] = _mm_add_epi8(pMt_1[i], vuint8_if_elif_else(a, b, x, y ,z));
		

		a = pMt_1[i];
		b = pIt[i];
		x = _mm_sub_epi8(pMt_1[i], one);//Mt plus grand
		y = _mm_add_epi8(pMt_1[i], one);
		z = a; //Mt ==		
		pMt[i] = vuint8_if_elif_else(a, b, x, y ,z);

		//display_vuint8(pMt[i], "%4.0d", "pMt= "); puts("\n");
		//Ot=abs( Mt[i][j] - It[i][j] );	

		 CE QUI MARCHE
			a = pMt_1[k];
			b = pIt[k];
			x = _mm_sub_epi8(pMt_1[k], one);//Mt plus grand
			y = _mm_add_epi8(pMt_1[k], one);
			z = a; //Mt ==		
			//display_vuint8(pMt_1[k], " %d", "sMt_1 AVANT IF\t"); puts("");
			//pMt[k] = _mm_add_epi8(pMt_1[k], vuint8_if_elif_else(a, b, x, y ,z));
			pMt[k] = vuint8_if_elif_else(a, b, x, y ,z);
			
	}

	
	
	//on traite l'octet restant 
	uint8 *oMt = (uint8*) Mt[0];
	uint8 *oMt_1 = (uint8*) Mt_1[0];
	uint8 *oIt = (uint8*) It[0];
	//uint8 *oIt_1 = (uint8*) It_1[0];
	//uint8 * oOt = (uint8*) Ot[0];
	int last_indice = NB_UINT8_IMAGE - 1; 
	if(oMt_1[last_indice]<oIt[last_indice]){
	    oMt[last_indice] = oMt_1[last_indice] + 1;
	}
	else if(oMt_1[last_indice]>oIt[last_indice]){
		oMt[last_indice] = oMt_1[last_indice] - 1;
	}
	else{
		oMt[last_indice] = oMt_1[last_indice];
	}
	


	return ;
}

void test_part1_sd()
{
	PRINT_BEGIN();
	//============SIMD
	int i;
	long nrl, nrh, ncl, nch;

	uint8** It_1;
		char dir[255];
	sprintf(dir, image_directory, 0);
	It_1 = LoadPGM_ui8matrix(dir, &nrl, &nrh, &ncl, &nch);
	uint8** It = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Et = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Vt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Vt_1 = ui8matrix(nrl, nrh, ncl, nch);
	Init_V(Vt_1, nrl, nrh, ncl, nch);
	uint8 **sMt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **sMt_1 = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Mt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Mt_1 = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Ot = ui8matrix(nrl, nrh, ncl, nch);
	Init_M(Mt_1, It_1, nrl, nrh, ncl, nch);
	Init_M(sMt_1, It_1, nrl, nrh, ncl, nch);

	char file[255];

	
	for (i = 1; i<2; i++) {

		
		It = LoadPGM_ui8matrix("hall/hall000000.pgm", &nrl, &nrh, &ncl, &nch);
		sprintf(file, image_directory, i);
		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

	}	

	part1_sd_SSE2(It, It_1, Et, Vt, Vt_1, sMt, sMt_1, Ot, nrl,  nrh,  ncl,  nch);
	part1_sd_scalar(It, It_1, Et, Vt, Vt_1,Mt, Mt_1, Ot, nrl,  nrh,  ncl,  nch);
	//part1mix(It, It_1, Et, Vt, Vt_1,Mt, Mt_1, sMt, sMt_1, Ot, nrl,  nrh,  ncl,  nch);	
	if(compare_matrix(Mt, sMt, nrl,  nrh,  ncl,  nch)) return;
	//compare_matrix(Mt, sMt, nrl,  nrh,  ncl,  nch);
	PRINT_OK();
	PRINT_END();

	
}



void test_part2_sd() 
{
	PRINT_BEGIN();
	//============SIMD
	int i;
	long nrl, nrh, ncl, nch;

	uint8** It_1;
		char dir[255];
	sprintf(dir, image_directory, 0);
	It_1 = LoadPGM_ui8matrix(dir, &nrl, &nrh, &ncl, &nch);
	uint8** It = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Et = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **sEt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Vt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Vt_1 = ui8matrix(nrl, nrh, ncl, nch);

	uint8 **sVt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **sVt_1 = ui8matrix(nrl, nrh, ncl, nch);

	
	uint8 **sMt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **sMt_1 = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Mt = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Mt_1 = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **Ot = ui8matrix(nrl, nrh, ncl, nch);
	uint8 **sOt = ui8matrix(nrl, nrh, ncl, nch);

	Init_M(Mt_1, It_1, nrl, nrh, ncl, nch);
	Init_M(sMt_1, It_1, nrl, nrh, ncl, nch);

	Init_V(Vt_1, nrl, nrh, ncl, nch);
	Init_V(sVt_1, nrl, nrh, ncl, nch);
	

	char file[255];

	
	for (i = 1; i<300; i++) {

		sprintf(file, image_directory, i);
		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		part1_sd_SSE2(It, It_1, Et, sVt, sVt_1, sMt, sMt_1, sOt, nrl,  nrh,  ncl,  nch);
		part1_sd_scalar(It, It_1, sEt, Vt, Vt_1,Mt, Mt_1, Ot, nrl,  nrh,  ncl,  nch);
		//part1mix(It, It_1, Et, Vt, Vt_1,Mt, Mt_1, sMt, sMt_1, Ot, nrl,  nrh,  ncl,  nch);	
		if(compare_matrix(Mt, sMt, nrl,  nrh,  ncl,  nch)) {
			PRINT_DEBUG
			return;
		}

		part2_sd_SSE2(It, It_1, Et, sVt, sVt_1, sMt, sMt_1, sOt, nrl,  nrh,  ncl,  nch);
		part2_sd_scalar(It, It_1, Et, Vt, Vt_1, Mt, Mt_1, Ot, nrl,  nrh,  ncl,  nch);
		
		if(compare_matrix(sVt, Vt, nrl,  nrh,  ncl,  nch)) {
			PRINT_DEBUG
			return;
		}
		if(compare_matrix(Ot, sOt, nrl,  nrh,  ncl,  nch)) {
			PRINT_DEBUG
			return;
		}

		if(compare_matrix(sVt_1, Vt_1, nrl,  nrh,  ncl,  nch)) {
			PRINT_DEBUG
			return;
		}

		part3_sd_SSE2(It, It_1, sEt, sVt, sVt_1, sMt, sMt_1, sOt, nrl,  nrh,  ncl,  nch);
		part3_sd_scalar(It, It_1, Et, Vt, Vt_1, Mt, Mt_1, Ot, nrl,  nrh,  ncl,  nch);

		if(compare_matrix(sVt, Vt, nrl,  nrh,  ncl,  nch)) {
			PRINT_DEBUG
			return;
		}
		
		if(compare_matrix(Et, sEt, nrl,  nrh,  ncl,  nch)) {
			PRINT_DEBUG
			return;
		}


		Copy(It_1, It, nrl, nrh, ncl, nch);

		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);

		Copy(sMt_1, sMt, nrl, nrh, ncl, nch);
		Copy(sVt_1, sVt, nrl, nrh, ncl, nch);



	}	

	
	part1_sd_SSE2(It, It_1, Et, sVt, sVt_1, sMt, sMt_1, sOt, nrl,  nrh,  ncl,  nch);
	part1_sd_scalar(It, It_1, Et, Vt, Vt_1,Mt, Mt_1, Ot, nrl,  nrh,  ncl,  nch);
	
	part2_sd_SSE2(It, It_1, Et, sVt, sVt_1, sMt, sMt_1, sOt, nrl,  nrh,  ncl,  nch);
	part2_sd_scalar(It, It_1, Et, Vt, Vt_1, Mt, Mt_1, Ot, nrl,  nrh,  ncl,  nch);
	if(compare_matrix(sVt, Vt, nrl,  nrh,  ncl,  nch)) return;
	if(compare_matrix(Ot, sOt, nrl,  nrh,  ncl,  nch)) return;
	part3_sd_SSE2(It, It_1, Et, sVt, sVt_1, sMt, sMt_1, sOt, nrl,  nrh,  ncl,  nch);
	part3_sd_scalar(It, It_1, sEt, Vt, Vt_1, Mt, Mt_1, Ot, nrl,  nrh,  ncl,  nch);
	if(compare_matrix(Ot, sOt, nrl,  nrh,  ncl,  nch)) return;
	if(compare_matrix(Vt, sVt, nrl,  nrh,  ncl,  nch)) return;
	//PRINT_DEBUG
	if(compare_matrix(Et, sEt, nrl,  nrh,  ncl,  nch)) return;
	//compare_matrix(Mt, sMt, nrl,  nrh,  ncl,  nch);
	
	PRINT_OK();
	PRINT_END();
}


void part1mix(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1,
					 uint8 **Mt, uint8 **Mt_1, uint8 **sMt, uint8 **sMt_1,  uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	vuint8 a,b,x,y,z, one;
	one = init_vuint8(1);
	
	vuint8 test = init_vuint8(253);
	a = init_vuint8(253);
	b = init_vuint8(252);
	x = init_vsint8(-1);//Mt plus grand
	y = init_vsint8(+1);//Mt plus petit
	z = _mm_setzero_si128(); //Mt ==
	vuint test1 = _mm_adds_epi8(test, vuint8_if_elif_else(a, b, x, y ,z));
	


	long i,j,k;
	k=0;
	int cpt = 0;

	if(compare_matrix(sMt_1, Mt_1, nrl,  nrh,  ncl,  nch)){
		printf("DEBUT PROB\n");
		return;
	}
	

	vuint8 *pIt = (vuint8*) It[0];
	vuint8 *pMt = (vuint8*) sMt[0];
	vuint8 *pMt_1 = (vuint8*) sMt_1[0];
	
	//long len = ((nrh - nrl) * (nch - ncl))/15;
	//float flen = (float) (((nrh - nrl +1) * (nch - ncl +1))/16);
	//printf("len = %ld, flen = %f , %d %d% d %d\n", len, flen, nrl, nrh, ncl, nch);
	for(i=nrl; i<=nrh; i++) {
	    for(j=ncl; j<=nch; j++) {

	    	
	    	if(Mt_1[i][j]<It[i][j]){
	    		Mt[i][j] = Mt_1[i][j] + 1;
	    	}
	    	else if(Mt_1[i][j]>It[i][j]){
	    		Mt[i][j] = Mt_1[i][j] - 1;
	    	}
	    	else{
	    		Mt[i][j] = Mt_1[i][j];
	    	}
	    	//printf("Mt[%d][%d] = %d\t",i,j,Mt[i][j]);
	    	//printf("Mt_1[%d][%d] = %d\t",i,j,Mt_1[i][j]);
	    	//printf("It[%d][%d] = %d\n",i,j,It[i][j]);
	    	cpt++;
	    	 if(cpt == 16){
	    	cpt = 0;
	    	a = pMt_1[k];
			b = pIt[k];
			x = init_vsint8(-1);//Mt plus grand
			y = init_vsint8(+1);//Mt plus petit
			z = _mm_setzero_si128(); //Mt ==
			

			a = pMt_1[k];
			b = pIt[k];
			x = _mm_sub_epi8(pMt_1[k], one);//Mt plus grand
			y = _mm_add_epi8(pMt_1[k], one);
			z = a; //Mt ==		

			//display_vuint8(pMt_1[k], " %d", "sMt_1 AVANT IF\t"); puts("");
			//pMt[k] = _mm_add_epi8(pMt_1[k], vuint8_if_elif_else(a, b, x, y ,z));
			pMt[k] = vuint8_if_elif_else(a, b, x, y ,z);
			
			//display_vuint8(pMt[k], " %d", "sMt\t"); puts("");
			//display_vuint8(pMt_1[k], " %d", "sMt_1\t"); puts("");
			
			display_vuint8(pMt_1[k], " %d", "sMt_1\t"); puts("");
				display_vuint8(pIt[k], " %d", "It\t"); puts("");
				printf("<, > ou = ?. On fait l'opération : \n");
				display_vuint8(pMt_1[k], " %d", "sMt_1\t"); puts("");
				printf("+\n");
				display_vsint8(vuint8_if_elif_else(a, b, x, y ,z), " %d", "if\t"); puts("");
				printf("=\n");
				display_vuint8(pMt[k], " %d", "sMt\t"); puts("");
			
			k++;
			if(compare_matrix(Mt, sMt, nrl,  nrh,  ncl,  nch)){
				k--;
				printf("Erreur : \n");
				display_vuint8(pMt_1[k], " %d", "sMt_1\t"); puts("");
				display_vuint8(pIt[k], " %d", "It\t"); puts("");
				printf("<, > ou = ?. On fait l'opération : \n");
				display_vuint8(pMt_1[k], " %d", "sMt_1\t"); puts("");
				printf("+\n");
				display_vsint8(vuint8_if_elif_else(a, b, x, y ,z), " %d", "if\t"); puts("");
				printf("=\n");
				display_vuint8(pMt[k], " %d", "sMt\t"); puts("");


				//display_vuint8(test1, " %d", "test1\t"); puts("");
				return;
			}


	    }
	    }
	    
	   
	}
	//printf(" k = %ld\n", k);
	return;
}




void part2_sd_SSE2(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1,
					 uint8 **Mt, uint8 **Mt_1, uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	vuint8 * pOt = (vuint8 *) Ot[0];

	//vuint8 *pOt = (vuint8*) Ot[0];
	vuint8 *pIt = (vuint8*) It[0];
	//vuint8 *pIt_1 = (vuint8*) It_1[0];
	//vuint8 *pEt = (vuint8 *) Et[0];
	//vuint8 *pVt = (vuint8*) Vt[0];
	//vuint8 *pVt_1 = (vuint8*) Vt_1[0];
	vuint8 *pMt = (vuint8*) Mt[0];
	//vuint8 *pMt_1 = (vuint8*) Mt_1[0];


	for (int i = 0; i < NBE_VUINT8_IMAGE; i++){
		//printf("i = %d \n", i);
		pOt[i]= vuint8_sub_abs(pMt[i], pIt[i]);
	}
	
}

void part2_sd_scalar(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1,
					 uint8 **Mt, uint8 **Mt_1, uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	long i,j;
	for(i=nrl; i<=nrh; i++) {
	    for(j=ncl; j<=nch; j++) {
	    	Ot[i][j]=abs( Mt[i][j] - It[i][j] );
	    }
	}	
}

void part3_sd_SSE2(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1,
					 uint8 **Mt, uint8 **Mt_1, uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	vuint8 * pOt = (vuint8 *) Ot[0];

	//vuint8 *pOt = (vuint8*) Ot[0];
	//uint8 *pIt = (vuint8*) It[0];
	//vuint8 *pIt_1 = (vuint8*) It_1[0];
	vuint8 *pEt = (vuint8 *) Et[0];
	vuint8 *pVt = (vuint8*) Vt[0];
	vuint8 *pVt_1 = (vuint8*) Vt_1[0];
	//vuint8 *pMt = (vuint8*) Mt[0];
	//vuint8 *pMt_1 = (vuint8*) Mt_1[0];
	//uint8 ** mb = ui8matrix(nrl,nrh,ncl,nch);

	vuint8 a,b,x,y,z, one;
	int i,j;
	one = init_vuint8(1);
	for (i = 0; i < NBE_VUINT8_IMAGE; i++)
	{
		a = pVt_1[i];
		b = pOt[i];
		for (j = 0; j < N-1; j++){
			b = _mm_adds_epu8(b, pOt[i]);
		}

		x = _mm_sub_epi8(pVt_1[i], one);//Mt plus grand
		y = _mm_add_epi8(pVt_1[i], one);//Mt plus petit
		z = pVt_1[i];
		pVt[i] = vuint8_if_elif_else(a, b, x, y ,z);

		
		if(i==3){
			display_vuint8(b, "%d ", "b\t"); puts("\n");
			display_vuint8(pVt_1[i], "%d ", "pvt_1\t"); puts("\n");
			display_vuint8(pOt[i], "%d ", "Ot\t"); puts("\n");
			display_vuint8(pVt[i], "%d ", "pvt absv\t"); puts("\n");
		}
		
		
	}
	
	//to_matrix(mb,b);
	//printf("mb[0][52] = %d\n", mb[0][52]);

	for ( i = 0; i < NBE_VUINT8_IMAGE; ++i)
	{
		
		
		a = pVt[i];
		b = init_vuint8(VMIN);
		x = a;
		y = b;
		pVt[i] = vuint8_if_else(a,b,x,y); 
		//opti possible en evitant de faire un autre if_else si le premier a été fait
		b = init_vuint8(VMAX);
		x = b;
		y = pVt[i];
		pVt[i] = vuint8_if_else(a,b,x,y); 

		if(i==0){
			//display_vuint8(b, "%d ", "b\t"); puts("\n");
			//display_vuint8(pVt_1[i], "%d ", "pvt_1\t"); puts("\n");
			//display_vuint8(pOt[i], "%d ", "Ot\t"); puts("\n");
			//display_vuint8(pVt[i], "%d ", "pvt ap\t"); puts("\n");
			a = pVt[i];
		b = init_vuint8(VMIN);
		x = a;
		y = b;
			//display_vuint8(vuint8_if_else(a,b,x,y), "%d ", "if\t"); puts("\n");
		}
	}
	
		for (int i = 0; i < NBE_VUINT8_IMAGE; ++i)
	{
		a = pOt[i];
		b = pVt[i];
		x = init_vuint8(MAX_UINT8);
		y = _mm_setzero_si128();
		pEt[i] = vuint8_if_else(a,b,x,y); 
	}
}

void part3_sd_scalar(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1,
					 uint8 **Mt, uint8 **Mt_1, uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	long i,j;
	for(i=nrl; i<=nrh; i++) {
	    for(j=ncl; j<=nch; j++) {    
	
			if(Vt_1[i][j] < N * Ot[i][j] ){
			    Vt[i][j] = Vt_1[i][j] + 1;
			}
			else if(Vt_1[i][j] > N * Ot[i][j]){
			    Vt[i][j] = Vt_1[i][j] - 1;
			}
			else{
			    Vt[i][j] = Vt_1[i][j];
			}

			if(j==52 && i==0){

				//printf("Vt_1[i][j] = %d, Ot = %d; N * Ot[i][j] = %d, Vt[i][j] =%d \n",Vt_1[i][j],Ot[i][j], N * Ot[i][j], Vt[i][j]);
			}
			if(Vt[i][j]<VMIN){
	    		Vt[i][j]=VMIN;
	    	}
	    	else if(Vt[i][j]>VMAX){
	    		Vt[i][j]=VMAX;
	    	}
	    	if(Ot[i][j] < Vt[i][j]){
	    		Et[i][j]=0;
	    	}
	    	else{
	    		Et[i][j]=255;
	    	}
	    }
	}


}


void part1_sd_scalar(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1,
					 uint8 **Mt, uint8 **Mt_1, uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	long i,j;
	for(i=nrl; i<=nrh; i++) {
	    for(j=ncl; j<=nch; j++) {

	    	if(Mt_1[i][j]<It[i][j]){
	    		Mt[i][j] = Mt_1[i][j] + 1;
	    	}
	    	else if(Mt_1[i][j]>It[i][j]){
	    		Mt[i][j] = Mt_1[i][j] - 1;
	    	}
	    	else{
	    		Mt[i][j] = Mt_1[i][j];
	    	}
	    }
	}

	return;
}


void chrono() {
	double total_vide, total_fd, total_fd_P, total_sd, total_sd_P;

	total_fd = 0;
	total_fd_P = 0;
	total_sd = 0;
	total_sd_P = 0;
	
	struct timespec start, end;
	//######################################### initialisation de tous les paramètres #########################################
	int i;

	long nrl, nrh, ncl, nch;
	uint8** It_1;
		char dir[255];
	sprintf(dir, image_directory, 0);
	It_1 = LoadPGM_ui8matrix(dir, &nrl, &nrh, &ncl, &nch);

	uint8** It;
	It = ui8matrix(nrl, nrh, ncl, nch);

	uint8 **Et;
	Et = ui8matrix(nrl-2, nrh+2, ncl-2, nch+2);

	uint8 **Vt;
	Vt = ui8matrix(nrl, nrh, ncl, nch);

	uint8 **Vt_1;
	Vt_1 = ui8matrix(nrl, nrh, ncl, nch);

	Init_V(Vt_1, nrl, nrh, ncl, nch);

	uint8 **Mt;
	Mt = ui8matrix(nrl, nrh, ncl, nch);

	uint8 **Mt_1;
	Mt_1 = ui8matrix(nrl, nrh, ncl, nch);

	uint8 **Ot;
	Ot = ui8matrix(nrl, nrh, ncl, nch);

	Init_M(Mt_1, It_1, nrl, nrh, ncl, nch);


	char file[255];


	//######################################### parcours de toutes les photos sans traitement #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		
		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_vide = (end.tv_sec - start.tv_sec);
	total_vide += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("vide : %lf secondes\n", total_vide);

	//######################################### parcours de toutes les photos avec traitement FD #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement fd #########################################


		Frame_Difference_Matrix(It, It_1, Et, nrl, nrh, ncl, nch);


		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_fd = (end.tv_sec - start.tv_sec);
	total_fd += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("FD : %lf secondes\n", total_fd);

	//######################################### parcours de toutes les photos avec traitement FD avec post traitement #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement fd #########################################


		Frame_Difference_Matrix(It, It_1, Et, nrl, nrh, ncl, nch);


		//######################################### post traitement #########################################

		posTraitementFO(Et, nrl, nrh, ncl, nch);


		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_fd_P = (end.tv_sec - start.tv_sec);
	total_fd_P += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("FD avec post traitement: %lf secondes\n", total_fd_P);



	//######################################### parcours de toutes les photos avec traitement SD #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement sd #########################################


		SD(It, It_1, Et, Vt, Vt_1, Mt, Mt_1, nrl, nrh, ncl, nch);


		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_sd = (end.tv_sec - start.tv_sec);
	total_sd += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("SD : %lf secondes\n", total_sd);


	//######################################### parcours de toutes les photos avec traitement SD avec post traitement #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement sd #########################################


		SD(It, It_1, Et, Vt, Vt_1, Mt, Mt_1, nrl, nrh, ncl, nch);


		//######################################### post traitement #########################################

		posTraitementOF(Et, nrl, nrh, ncl, nch);


		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_sd_P = (end.tv_sec - start.tv_sec);
	total_sd_P += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("SD avec post traitement: %lf secondes\n", total_sd_P);


	//######################################################################################################################################################################################################################
	//######################################################################################################################################################################################################################
	//######################################################################################################################################################################################################################
	//######################################################################################################################################################################################################################
	//#############################################################################  CHRONO SIMD  ##########################################################################################################################
	//######################################################################################################################################################################################################################
	//######################################################################################################################################################################################################################
	//######################################################################################################################################################################################################################
	//######################################################################################################################################################################################################################




	//######################################### parcours de toutes les photos avec traitement FD #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement fd #########################################

		//Et = ui8matrix(nrl,nrh,ncl,nch);
		//Frame_Difference_Matrix(It, It_1, Et, nrl, nrh, ncl, nch);
		vuint8_fd_SSE2_matrix(It, It_1, Et, nrl, nrh, ncl, nch);
		//Et = ui8matrix(nrl-2,nrh+2,ncl-2,nch+2);



		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_fd = (end.tv_sec - start.tv_sec);
	total_fd += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("FD SIMD : %lf secondes\n", total_fd);

	//######################################### parcours de toutes les photos avec traitement FD avec post traitement #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement fd #########################################


		Frame_Difference_Matrix(It, It_1, Et, nrl, nrh, ncl, nch);


		//######################################### post traitement #########################################

		posTraitementFO_SSE2(Et, nrl, nrh, ncl, nch);


		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_fd_P = (end.tv_sec - start.tv_sec);
	total_fd_P += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("FD SIMD avec post traitement SIMD: %lf secondes\n", total_fd_P);



	//######################################### parcours de toutes les photos avec traitement SD #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement sd #########################################


		vuint8_sd_SSE2(It, It_1, Et, Vt, Vt_1, Mt, Mt_1, Ot, nrl, nrh, ncl, nch);


		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_sd = (end.tv_sec - start.tv_sec);
	total_sd += (end.tv_nsec - start.tv_nsec) / 1000000000.0;

	printf("SD SIMD : %lf secondes\n", total_sd);


	//######################################### parcours de toutes les photos avec traitement SD avec post traitement #########################################

	clock_gettime(CLOCK_MONOTONIC, &start);
	for (i = 1; i < 300; i++) {

		sprintf(file, image_directory, i);

		MLoadPGM_ui8matrix(file, nrl, nrh, ncl, nch, It);

		//######################################### traitement sd #########################################


		SD(It, It_1, Et, Vt, Vt_1, Mt, Mt_1, nrl, nrh, ncl, nch);


		//######################################### post traitement #########################################

		posTraitementOF_SSE2(Et, nrl, nrh, ncl, nch);


		//######################################### Itération #########################################

		Copy(It_1, It, nrl, nrh, ncl, nch);
		Copy(Mt_1, Mt, nrl, nrh, ncl, nch);
		Copy(Vt_1, Vt, nrl, nrh, ncl, nch);
	}

	clock_gettime(CLOCK_MONOTONIC, &end);
	total_sd_P = (end.tv_sec - start.tv_sec);
	total_sd_P += (end.tv_nsec - start.tv_nsec) / 1000000000.0;


	printf("SD SIMD avec post traitement SIMD : %lf secondes\n", total_sd_P);


}

void test_ext_8_16()
{
	vuint8 v = init_vuint8(5);
	vuint16 v16 = ext_8_16(v);
	display_vuint8(v, "%4.0x", " v"); puts("\n");
	display_vuint16(v16, "%4.0x", " v16 "); puts("\n");
}

void test_vuint16_abs_SSE2()
{	
	PRINT_BEGIN();

	vuint16 a, abs_a;
	a = init_vuint16(-5);
	abs_a = vuint16_abs_SSE2(a);
	display_vsint16(a, " %d\t", "a\t"); puts("");
	display_vsint16(abs_a, " %d\t", "abs_a\t"); puts("\n");

	vuint16 b, abs_b;
	b = init_vuint16(16);
	abs_b = vuint16_abs_SSE2(b);
	display_vuint16(b, " %d\t", "b\t"); puts("");
	display_vuint16(abs_b, " %d\t", "abs_b\t"); puts("\n");

	vuint16 c, abs_c;
	c = init_vuint16(0);
	abs_c = vuint16_abs_SSE2(c);
	display_vuint16(c, " %d\t", "c\t"); puts("");
	display_vuint16(abs_c, " %d\t", "abs_c\t"); puts("\n");

	PRINT_END();

}


vsint16 vsint16_if_else(vsint16 a, vsint16 b, vsint8 x, vsint8 y)
{
    vsint16 c, z;
    c = _mm_cmplt_epi16(a ,b);//compare a and b
    z = _mm_or_si128(_mm_and_si128(c, y), _mm_andnot_si128(c,x));//select value
    return z;    
}

//complement à deux
vuint8 vuint8_ca2(vuint8 a)
{
     vuint8 _a;
     _a = _mm_xor_si128(a, init_vuint8(MAX_UINT8)); //_a = NOT a
     _a = _mm_add_epi8 (_a, init_vuint8(1)); // on ajoute 1
     return _a;
}

//complement à deux
vsint16 vuint16_ca2(vuint16 a)
{
     vuint16 _a;
     _a = _mm_xor_si128(a, init_vuint16(MAX_16B)); //_a = NOT a
     _a = _mm_add_epi16 (_a, init_vuint16(1));

     return _a;
}

//aide possible at : https://stackoverflow.com/questions/32408665/fastest-way-to-compute-absolute-value-using-sse
vuint16 vuint16_abs_SSE2(vsint16 a)
{   
    //si a > 0, return a, else return son complément à deux
    return vsint16_if_else(a, _mm_setzero_si128(), a, vuint16_ca2(a));
}

vuint16 vuint16_if_elif_else(vuint16 a, vuint16 b, vuint8 x, vuint8 y, vuint8 z)
{
    
    //c = _mm_cmplt_epi8(a ,b);//compare a and b
    c = _mm_cmpeq_epi16(a,b);
    //display_vuint8(c, "%4.0d", "c\t"); puts("\n");
    d = _mm_or_si128(_mm_and_si128(c,z), _mm_andnot_si128(c,vsint16_if_else(a,b,x,y)));//select value
    return d;    
}

vuint8 vuint8_sub_absv2(vuint8 a, vuint b)
{   
    
    vuint8 max, min;
    max = _mm_max_epu8(a, b);
    min = _mm_min_epu8(a, b); //Solution alternative, utiliser un if_else
    return _mm_sub_epi8(max , min);
    
    return _mm_min_epu8(_mm_sub_epi8(a , b), _mm_sub_epi8(b , a));
}


vuint16 ext_8_16(vuint8 x)
{   
    vuint8 z8 = _mm_setzero_si128();
    vuint16 res;
    res = _mm_unpacklo_epi8(x,z8); 
    res = _mm_unpackhi_epi8(x,z8);
    return res;
}

int compare_matrix2(uint8 ** m1, uint8 ** m2, long nrl, long nrh, long ncl, long nch)
{

    long i, j, cpt;
    cpt = 0;
    for (i = nrl; i <= nrh; i++) {
        for (j = ncl; j <= nch; j++) {
            if (m1[i][j] != m2[i][j]) {
                cpt++;

                printf("m1[%ld][%ld] != m2[%ld][%ld]\n", i, j, i, j);
                //printf("%d != %d\n\n", m1[i][j], m2[i][j]);
                //return 1;
            }

        }
    }

    //printf("il y a %ld erreurs\n", cpt);

    if (cpt) {
        printf("il y a %ld erreurs\n", cpt);
        return 1;
    }
    //PRINT_OK();
    return 0;
}


void vector_to_scalar(vuint8 *v, uint8 ** res)
{
    //uint8 **res = ui8matrix(NRL, NRH, NCL, NCH);
    uint8 * p = (uint8 *) v;
    long i,j,k;
    k = 0;
    for(i=NRL; i<=NRH; i++) {
        for(j=NCL; j<=NCH; j++) {
            res[i][j] = p[k];
            k++;
        }
    }
}


void vuint8_sd_SSE2_vnul(uint8 **It, uint8 **It_1, uint8 **Et, uint8 **Vt, uint8 **Vt_1, uint8 **Mt, uint8 **Mt_1, uint8 **Ot,long nrl, long nrh, long ncl, long nch)
{
	vuint8 *pOt = (vuint8*) Ot[0];
	vuint8 *pIt = (vuint8*) It[0];
	//vuint8 *pIt_1 = (vuint8*) It_1[0];
	vuint8 *pEt = (vuint8 *) Et[0];
	vuint8 *pVt = (vuint8*) Vt[0];
	vuint8 *pVt_1 = (vuint8*) Vt_1[0];
	vuint8 *pMt = (vuint8*) Mt[0];
	vuint8 *pMt_1 = (vuint8*) Mt_1[0];
	vuint8 a,b,x,y,z, one;
	int i,j;

	one = init_vuint8(1);
	long len = ((nrh - nrl + 1) * (nch - ncl + 1))/16;

	for (i = 0; i < len; i++)
	{
		a = pMt_1[i];
		b = pIt[i];
		x = _mm_sub_epi8(pMt_1[i], one);//Mt plus grand
		y = _mm_add_epi8(pMt_1[i], one);
		z = a; //Mt ==		
		pMt[i] = vuint8_if_elif_else(a, b, x, y ,z);

	}

//========================================================================

	for (i = 0; i < NBE_VUINT8_IMAGE; i++){
		//printf("i = %d \n", i);
		pOt[i]= vuint8_sub_abs(pMt[i], pIt[i]);
	}

//========================================================================

	one = init_vuint8(1);
	for (i = 0; i < NBE_VUINT8_IMAGE; i++)
	{
		a = pVt_1[i];
		b = pOt[i];
		for (j = 0; j < N-1; j++){
			b = _mm_adds_epu8(b, pOt[i]);
		}

		x = _mm_sub_epi8(pVt_1[i], one);//Mt plus grand
		y = _mm_add_epi8(pVt_1[i], one);//Mt plus petit
		z = pVt_1[i];
		pVt[i] = vuint8_if_elif_else(a, b, x, y ,z);	
		
	}

//========================================================================
		
	for ( i = 0; i < NBE_VUINT8_IMAGE; ++i)
	{	
		
		a = pVt[i];
		b = init_vuint8(VMIN);
		x = a;
		y = b;
		pVt[i] = vuint8_if_else(a,b,x,y); 
		//opti possible en evitant de faire un autre if_else si le premier a été fait
		b = init_vuint8(VMAX);
		x = b;
		y = pVt[i];
		pVt[i] = vuint8_if_else(a,b,x,y); 

		if(i==0){
			//display_vuint8(b, "%d ", "b\t"); puts("\n");
			//display_vuint8(pVt_1[i], "%d ", "pvt_1\t"); puts("\n");
			//display_vuint8(pOt[i], "%d ", "Ot\t"); puts("\n");
			//display_vuint8(pVt[i], "%d ", "pvt ap\t"); puts("\n");
			a = pVt[i];
		b = init_vuint8(VMIN);
		x = a;
		y = b;
			//display_vuint8(vuint8_if_else(a,b,x,y), "%d ", "if\t"); puts("\n");
		}
	}
	
		for (i = 0; i < NBE_VUINT8_IMAGE; ++i)
	{
		a = pOt[i];
		b = pVt[i];
		x = init_vuint8(MAX_UINT8);
		y = _mm_setzero_si128();
		pEt[i] = vuint8_if_else(a,b,x,y); 
	}
}

